/**
 * RM2PT Generator Runtime
 * generated by RM2PT v1.3.0
 */
package com.rm2pt.generator.cloudedgecollaboration;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.core.commands.AbstractHandler;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.commands.IHandler;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.jface.text.TextSelection;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.handlers.HandlerUtil;
import org.eclipse.xtext.builder.EclipseResourceFileSystemAccess2;
import org.eclipse.xtext.generator.GeneratorContext;
import org.eclipse.xtext.linking.lazy.LazyLinkingResource;
import org.eclipse.xtext.resource.SynchronizedXtextResourceSet;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.ui.resource.IResourceSetProvider;
import org.eclipse.xtext.xbase.lib.Exceptions;

@SuppressWarnings("all")
public class CodeGeneratorHandler extends AbstractHandler implements IHandler {
  @Inject
  private CodeGenerator generator;
  
  @Inject
  private Provider<EclipseResourceFileSystemAccess2> fileAccessProvider;
  
  @Inject
  private IResourceSetProvider resourceSetProvider;
  
  @Override
  public Object execute(final ExecutionEvent event) throws ExecutionException {
    ISelection selection = HandlerUtil.getCurrentSelection(event);
    if ((selection instanceof IStructuredSelection)) {
      IStructuredSelection structuredSelection = ((IStructuredSelection) selection);
      Object firstElement = structuredSelection.getFirstElement();
      if ((firstElement instanceof IFile)) {
        this.generateCode(((IFile)firstElement));
      }
    } else {
      if ((selection instanceof TextSelection)) {
        IEditorPart activeEditor = HandlerUtil.getActiveEditor(event);
        final IFile file = activeEditor.getEditorInput().<IFile>getAdapter(IFile.class);
        this.generateCode(file);
      }
    }
    return null;
  }
  
  public Object generateCode(final IFile file) {
    IProject project = file.getProject();
    IFolder srcGenFolder = project.getFolder("src-gen");
    boolean _exists = srcGenFolder.exists();
    boolean _not = (!_exists);
    if (_not) {
      try {
        NullProgressMonitor _nullProgressMonitor = new NullProgressMonitor();
        srcGenFolder.create(true, true, _nullProgressMonitor);
      } catch (final Throwable _t) {
        if (_t instanceof CoreException) {
          return null;
        } else {
          throw Exceptions.sneakyThrow(_t);
        }
      }
    }
    final EclipseResourceFileSystemAccess2 fsa = this.fileAccessProvider.get();
    fsa.setProject(project);
    fsa.setOutputPath("src-gen");
    NullProgressMonitor _nullProgressMonitor = new NullProgressMonitor();
    fsa.setMonitor(_nullProgressMonitor);
    final URI uri = URI.createPlatformResourceURI(file.getFullPath().toString(), true);
    ResourceSet _get = this.resourceSetProvider.get(project);
    SynchronizedXtextResourceSet rs = ((SynchronizedXtextResourceSet) _get);
    rs.addLoadOption(XtextResource.OPTION_RESOLVE_ALL, Boolean.TRUE);
    Resource _resource = rs.getResource(uri, true);
    LazyLinkingResource r = ((LazyLinkingResource) _resource);
    GeneratorContext _generatorContext = new GeneratorContext();
    this.generator.doGenerate(r, fsa, _generatorContext);
    return null;
  }
  
  @Override
  public boolean isEnabled() {
    return true;
  }
}
